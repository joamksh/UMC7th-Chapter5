name: CI/CD Pipeline

on:
  push:
    branches: [ develop ]  # develop 브랜치에 push가 발생하면 실행

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: umc7th
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        ports:
          - 3306:3306

    steps:
      - uses: actions/checkout@v3  # 코드 체크아웃

      - name: Set up JDK 17  # Java JDK 설정
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Make application.yml  # application.yml 파일 생성
        run: |
          cd ./src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > ./application.yml
        shell: bash

      - name: Grant execute permission for gradlew  # gradlew 실행 권한 부여
        run: chmod +x gradlew

      - name: Build with Gradle  # Gradle 빌드
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build -x test  # 테스트 제외 (필요시 활성화 가능)

      - name: Upload build artifact  # 빌드 결과 업로드
        uses: actions/upload-artifact@v3
        with:
          name: umc7thServer
          path: build/libs/*.jar

  deploy:
    needs: build  # build 작업 성공 후 실행
    runs-on: ubuntu-latest

    steps:
      - name: Download build artifact  # 빌드 결과 다운로드
        uses: actions/download-artifact@v3
        with:
          name: umc7thServer
          path: build/libs/

      - name: Deploy to EC2  # EC2에 배포
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "$EC2_SSH_KEY" > private_key.pem
          chmod 600 private_key.pem

          # JAR 파일 업로드
          jar_file=$(find build/libs -name '*.jar' ! -name '*plain.jar' | head -n 1)
          scp -i private_key.pem -o StrictHostKeyChecking=no "$jar_file" $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/umc7thServer.jar

          # application.yml 업로드
          echo "${{ secrets.APPLICATION_YML }}" > application.yml
          scp -i private_key.pem -o StrictHostKeyChecking=no application.yml $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/application.yml

          # EC2에서 애플리케이션 실행
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "
            if pgrep java > /dev/null; then
              pgrep java | xargs -r kill -15
              sleep 10
            fi
            nohup java -jar /home/$EC2_USERNAME/umc7thServer.jar \
              --spring.config.location=/home/$EC2_USERNAME/application.yml > /home/$EC2_USERNAME/app-$(date +%Y%m%d%H%M%S).log 2>&1 &
          "

          # 민감한 정보 삭제
          rm -f private_key.pem application.yml
