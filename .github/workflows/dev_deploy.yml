name: CI/CD Pipeline

on:
  push:
    branches: [ develop ]  # develop 브랜치에 Push 발생 시 실행

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 저장소 코드 체크아웃
      - uses: actions/checkout@v3

      # 2. JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3. MySQL Docker 컨테이너 실행
      - name: Start MySQL container
        uses: docker/setup-buildx-action@v2
      - name: Run MySQL container
        run: |
          docker run -d --name mysql-container -e MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
            -e MYSQL_DATABASE=umc7th -e MYSQL_USER=${{ secrets.MYSQL_USER }} -e MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
            -p 3306:3306 mysql:8.0

      # 4. application.yml 생성
      - name: Create application.yml
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > ./src/main/resources/application.yml

      # 5. Gradlew 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 6. Gradle 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build

      # 7. Gradle 테스트 실행
      - name: Run Tests
        run: ./gradlew test -Dspring.profiles.active=test

      # 8. 빌드 아티팩트 업로드
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: umc7thServer
          path: build/libs/*.jar

  deploy:
    needs: build  # build 완료 후 실행
    runs-on: ubuntu-latest

    steps:
      # 1. 빌드된 아티팩트 다운로드
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: umc7thServer

      # 2. EC2에 JAR 파일 배포
      - name: Deploy to EC2
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "$EC2_SSH_KEY" > private_key.pem
          chmod 600 private_key.pem
          scp -i private_key.pem -o StrictHostKeyChecking=no build/libs/*.jar $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/umc7thServer.jar
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "
            pgrep java | xargs -r kill -15
            sleep 5
            nohup java -jar /home/$EC2_USERNAME/umc7thServer.jar > app.log 2>&1 &
          "
          rm -f private_key.pem
